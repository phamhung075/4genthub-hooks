#!/bin/bash
# Universal Claude Hook Executor - Works with symlinked .claude directories
#
# This wrapper solves the path resolution issue where relative paths in
# .claude/settings.json don't work when .claude is symlinked to other projects.
#
# Usage: ./claude_hook_exec <hook_name> [args...]
# Example: ./claude_hook_exec user_prompt_submit.py --log-only

# Function to find the real execute_hook.py path
find_execute_hook() {
    local current_dir="$PWD"
    local script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

    # Try script directory first (most reliable when called via symlink)
    if [[ -f "$script_dir/execute_hook.py" ]]; then
        echo "$script_dir/execute_hook.py"
        return 0
    fi

    # Try relative to current directory (original approach)
    if [[ -f "$current_dir/.claude/hooks/execute_hook.py" ]]; then
        echo "$current_dir/.claude/hooks/execute_hook.py"
        return 0
    fi

    # Try resolving symlinked .claude directory
    local claude_dir="$current_dir/.claude"
    if [[ -L "$claude_dir" ]] && [[ -d "$claude_dir" ]]; then
        local real_claude_dir="$(readlink -f "$claude_dir")"
        if [[ -f "$real_claude_dir/hooks/execute_hook.py" ]]; then
            echo "$real_claude_dir/hooks/execute_hook.py"
            return 0
        fi
    fi

    # Search up the directory tree for project root
    local search_dir="$current_dir"
    while [[ "$search_dir" != "/" ]]; do
        # Look for project markers
        for marker in "CLAUDE.md" ".env.dev" ".env.claude" "CLAUDE.local.md" ".git" "package.json" "pyproject.toml"; do
            if [[ -e "$search_dir/$marker" ]]; then
                # Check for .claude/hooks/execute_hook.py
                local claude_path="$search_dir/.claude"
                if [[ -d "$claude_path" ]]; then
                    local hooks_path
                    if [[ -L "$claude_path" ]]; then
                        hooks_path="$(readlink -f "$claude_path")/hooks/execute_hook.py"
                    else
                        hooks_path="$claude_path/hooks/execute_hook.py"
                    fi

                    if [[ -f "$hooks_path" ]]; then
                        echo "$hooks_path"
                        return 0
                    fi
                fi
            fi
        done
        search_dir="$(dirname "$search_dir")"
    done

    return 1
}

# Main execution
main() {
    # Check if at least one argument provided
    if [[ $# -lt 1 ]]; then
        echo "Usage: claude_hook_exec <hook_name> [args...]" >&2
        echo "Example: claude_hook_exec user_prompt_submit.py --log-only" >&2
        exit 1
    fi

    # Find the execute_hook.py script
    local execute_hook_path
    execute_hook_path="$(find_execute_hook)"

    if [[ -z "$execute_hook_path" ]]; then
        echo "Error: Could not find execute_hook.py" >&2
        echo "Searched in:" >&2
        echo "  - Current directory: $PWD/.claude/hooks/" >&2
        echo "  - Script directory: $(dirname "${BASH_SOURCE[0]}")/" >&2
        echo "  - Project root search up the directory tree" >&2
        exit 1
    fi

    # Execute the Python wrapper with all arguments
    exec python3 "$execute_hook_path" "$@"
}

# Run main function with all arguments
main "$@"