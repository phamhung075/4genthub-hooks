# MCP Hint Matrix Configuration
# Comprehensive hint configuration for all MCP tool/action combinations
# Used by mcp_hint_matrix.py factory

version: "1.0"
enabled: true

# Task Management Tool Hints
mcp__agenthub_http__manage_task:
  create:
    required_fields:
      - title
      - assignees
      - git_branch_id
    recommended_fields:
      - details
      - priority
      - estimated_effort
    field_hints:
      missing_title: "🚨 CRITICAL: 'title' is required - provide clear, specific task title"
      missing_assignees: "🚨 CRITICAL: 'assignees' required - use format: '@agent-name' (e.g., '@coding-agent')"
      missing_git_branch_id: "🚨 CRITICAL: 'git_branch_id' required - get from git branch creation or list"
      missing_details: "📝 STRONG RECOMMENDATION: Add 'details' with full requirements, files, acceptance criteria"
      missing_priority: "🎯 TIP: Set 'priority' (low/medium/high/urgent/critical) for proper scheduling"
      missing_estimated_effort: "⏱️ TIP: Add 'estimated_effort' (e.g., '2 hours', '3 days') for planning"
    contextual_hints:
      complex_task: "🔄 DECOMPOSITION HINT: This looks complex - create subtasks after creation"
      parallel_opportunity: "⚡ PARALLEL HINT: Consider creating related tasks for parallel execution"
    workflow_hints:
      - "After creation, immediately delegate with task_id only"
      - "For complex tasks, create subtasks for granular tracking"
      - "Update task status when starting work (todo → in_progress)"

  update:
    required_fields:
      - task_id
    recommended_fields:
      - status
      - progress_notes
      - details
    field_hints:
      missing_task_id: "🚨 CRITICAL: 'task_id' required to identify which task to update"
      missing_progress: "📊 REMINDER: Include 'progress_notes' or updated 'details' to show progress"
      long_time_no_update: "⏰ ATTENTION: Task hasn't been updated in >30 minutes"
      status_change: "✅ GOOD: Status change tracked - remember to update regularly"
      blocked_status: "⚠️ BLOCKED: Explain blockers in 'details' and consider creating debug task"
    workflow_hints:
      - "Update at least every 25% progress"
      - "Document blockers immediately when encountered"
      - "Add insights and discoveries as you work"

  complete:
    required_fields:
      - task_id
    recommended_fields:
      - completion_summary
      - testing_notes
    field_hints:
      missing_task_id: "🚨 CRITICAL: 'task_id' required to identify task to complete"
      missing_completion_summary: "📝 CRITICAL: Add 'completion_summary' detailing what was accomplished"
      missing_testing_notes: "🧪 IMPORTANT: Include 'testing_notes' about verification performed"
      quick_completion: "⚡ WARNING: Task completed very quickly - ensure all objectives met"
      no_prior_updates: "⚠️ WARNING: Completing without any progress updates - unusual pattern"
    workflow_hints:
      - "Verify all objectives met before completion"
      - "Update context with learnings before marking complete"
      - "Consider if task needs review before final completion"

  get:
    required_fields:
      - task_id
    field_hints:
      missing_task_id: "🚨 CRITICAL: 'task_id' required to retrieve task"
      include_context: "💡 TIP: Set 'include_context=true' for vision insights"

  list:
    optional_fields:
      - status
      - priority
      - git_branch_id
    field_hints:
      filter_tip: "🔍 TIP: Use filters (status, priority, git_branch_id) to narrow results"
      review_reminder: "📋 REMINDER: Review task list before creating duplicates"

  next:
    required_fields:
      - git_branch_id
    field_hints:
      missing_git_branch_id: "🚨 CRITICAL: 'git_branch_id' required to find next task"
      include_context: "💡 TIP: Set 'include_context=true' for AI recommendations"

  add_dependency:
    required_fields:
      - task_id
      - dependency_id
    field_hints:
      missing_task_id: "🚨 CRITICAL: 'task_id' required"
      missing_dependency_id: "🚨 CRITICAL: 'dependency_id' required - task that must complete first"
      circular_warning: "⚠️ CAUTION: Ensure no circular dependencies"

  remove_dependency:
    required_fields:
      - task_id
      - dependency_id
    field_hints:
      missing_task_id: "🚨 CRITICAL: 'task_id' required"
      missing_dependency_id: "🚨 CRITICAL: 'dependency_id' of dependency to remove"

# Subtask Management Tool Hints
mcp__agenthub_http__manage_subtask:
  create:
    required_fields:
      - task_id
      - title
    recommended_fields:
      - description
      - assignees
    field_hints:
      missing_task_id: "🚨 CRITICAL: 'task_id' (parent) required"
      missing_title: "🚨 CRITICAL: 'title' required for subtask"
      assignee_inheritance: "💡 INFO: Subtasks inherit parent's assignees if not specified"
      progress_tracking: "📊 TIP: Use 'progress_percentage' for automatic status updates"

  update:
    required_fields:
      - task_id
      - subtask_id
    recommended_fields:
      - progress_percentage
      - progress_notes
    field_hints:
      missing_ids: "🚨 CRITICAL: Both 'task_id' and 'subtask_id' required"
      progress_mapping: "📈 INFO: progress_percentage auto-maps: 0=todo, 1-99=in_progress, 100=done"
      blocker_hint: "⚠️ TIP: Use 'blockers' field to document impediments"

  complete:
    required_fields:
      - task_id
      - subtask_id
      - completion_summary
    recommended_fields:
      - impact_on_parent
      - insights_found
    field_hints:
      missing_completion_summary: "🚨 CRITICAL: 'completion_summary' required for subtask completion"
      missing_impact: "🔗 IMPORTANT: Describe 'impact_on_parent' for context"
      insights_valuable: "💡 EXCELLENT: Share 'insights_found' for team learning"

  list:
    required_fields:
      - task_id
    field_hints:
      parent_progress: "📊 INFO: Shows aggregated progress across all subtasks"
      completion_check: "✅ CHECK: Ensure all subtasks complete before parent"

# Context Management Tool Hints
mcp__agenthub_http__manage_context:
  create:
    required_fields:
      - level
      - context_id
    recommended_fields:
      - data
    field_hints:
      level_explanation: "📚 LEVELS: global(user) → project → branch → task"
      inheritance: "🔄 INFO: Child contexts inherit from parents automatically"

  update:
    required_fields:
      - level
      - context_id
    recommended_fields:
      - data
      - propagate_changes
    field_hints:
      propagation: "📡 TIP: Set 'propagate_changes=true' to cascade updates"
      data_format: "📝 FORMAT: 'data' should be JSON string or dict"

  resolve:
    required_fields:
      - level
      - context_id
    field_hints:
      include_inherited: "🔍 TIP: Set 'include_inherited=true' for complete chain"
      force_refresh: "🔄 TIP: Use 'force_refresh=true' to bypass cache"

  add_insight:
    required_fields:
      - level
      - context_id
      - content
    recommended_fields:
      - category
      - importance
    field_hints:
      categories: "📂 CATEGORIES: technical, business, performance, risk, discovery"
      importance_levels: "🎯 IMPORTANCE: low, medium, high, critical"

# Project Management Tool Hints
mcp__agenthub_http__manage_project:
  create:
    required_fields:
      - name
    recommended_fields:
      - description
    field_hints:
      unique_name: "🔤 IMPORTANT: Project name must be unique"
      auto_context: "🔄 INFO: Context automatically initialized on creation"

  project_health_check:
    required_fields:
      - project_id
    field_hints:
      health_metrics: "📊 PROVIDES: Task stats, agent load, blockers, progress"
      use_before_work: "🏥 TIP: Run health check before starting major work"

# Git Branch Management Tool Hints
mcp__agenthub_http__manage_git_branch:
  create:
    required_fields:
      - project_id
      - git_branch_name
    recommended_fields:
      - git_branch_description
    field_hints:
      naming_convention: "📝 TIP: Use descriptive names (feature/user-auth, fix/login-bug)"
      task_container: "📦 INFO: Branches are containers for related tasks"

  assign_agent:
    required_fields:
      - project_id
      - agent_id
    field_hints:
      identification: "🔍 INFO: Use git_branch_name OR git_branch_id"
      specialization: "🤖 TIP: Assign agents based on branch type"

# Agent Management Tool Hints
mcp__agenthub_http__manage_agent:
  register:
    required_fields:
      - project_id
      - name
    field_hints:
      agent_types: "🤖 33 AGENTS: coding, debugging, testing, architecture, etc."
      auto_id: "🔑 INFO: agent_id auto-generated if not provided"

# Agent Invocation Tool Hints
mcp__agenthub_http__call_agent:
  default:  # No action field for this tool
    required_fields:
      - name_agent
    field_hints:
      first_call: "🚨 CRITICAL: Call this FIRST in any session"
      master_orchestrator: "🎯 DEFAULT: Use 'master-orchestrator-agent' for principal sessions"
      one_time: "⚠️ IMPORTANT: Call only ONCE per session"
      response_usage: "📖 CRITICAL: Read 'system_prompt' from response - it's your instructions"

# Headers for different contexts
hint_headers:
  manage_task:
    create: "🎯 TASK CREATION VALIDATION"
    update: "📊 TASK UPDATE VALIDATION"
    complete: "✅ TASK COMPLETION CHECKLIST"
    list: "📋 TASK LIST HINTS"
    next: "🎯 NEXT TASK HINTS"
  manage_subtask:
    create: "📌 SUBTASK CREATION HINTS"
    update: "📈 SUBTASK UPDATE HINTS"
    complete: "✔️ SUBTASK COMPLETION VALIDATION"
  manage_context:
    update: "🔄 CONTEXT UPDATE HINTS"
    add_insight: "💡 INSIGHT ADDITION HINTS"
  call_agent:
    default: "🚨 AGENT LOADING CRITICAL REMINDERS"

# Complex task detection patterns
complex_task_indicators:
  - implement
  - build
  - system
  - integrate
  - refactor
  - optimize

# Parallel opportunity indicators
parallel_indicators:
  - frontend
  - backend
  - api
  - ui